# Check Nificluster created
apiVersion: nifi.orange.com/v1alpha1
kind: NifiCluster
metadata:
  name: sslnifi
status:
  #  nodesState: # TODO needed ?
  #    '0':
  #      configurationState: ConfigInSync
  #      gracefulActionState:
  #        actionState: GracefulUpscaleRunning
  #        actionStep: CONNECTING
  #        errorMessage: ''
  #      initClusterNode: true
  #    '1':
  #      configurationState: ConfigInSync
  #      gracefulActionState:
  #        actionState: GracefulUpscaleRequired
  #        errorMessage: ''
  #      initClusterNode: true
  #    '2':
  #      configurationState: ConfigInSync
  #      gracefulActionState:
  #        actionState: GracefulUpscaleRunning
  #        actionStep: CONNECTING
  #        errorMessage: ''
  #      initClusterNode: true
  state: ClusterReconciling # TODO correct ?
---

# Check all nodes
apiVersion: v1
kind: Pod
metadata:
  labels:
    nifi_cr: sslnifi
    nodeId: '0'
status:
  phase: Running
  initContainerStatuses:
    - name: zookeeper
      state:
        terminated:
          exitCode: 0
          reason: Completed
      ready: true
  containerStatuses:
    - name: nifi
      ready: true
      started: true
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    nifi_cr: sslnifi
    nodeId: '1'
status:
  phase: Running
  initContainerStatuses:
    - name: zookeeper
      state:
        terminated:
          exitCode: 0
          reason: Completed
      ready: true
  containerStatuses:
    - name: nifi
      ready: true
      started: true
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    nifi_cr: sslnifi
    nodeId: '2'
status:
  phase: Running
  initContainerStatuses:
    - name: zookeeper
      state:
        terminated:
          exitCode: 0
          reason: Completed
      ready: true
  containerStatuses:
    - name: nifi
      ready: true
      started: true
---
# Check secrets
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-ca-certificate
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-controller
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-0-server-certificate
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-1-server-certificate
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-2-server-certificate
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-config-0
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-config-1
---
apiVersion: v1
kind: Secret
metadata:
  name: sslnifi-config-2
---

# Cannot currently assert if a field is present / not empty with Kuttl => https://github.com/kudobuilder/kuttl/issues/262
#data:
#  ca.crt: ""
#  keystore.jks: ""
#  password: ""
#  tls.crt: ""
#  tls.key: ""
#  truststore.jks: ""
#  type: Opaque
##
#data:
#  authorizers.xml: ""
#  bootstrap-notification-servces.xml: ""
#  bootstrap.conf: ""
#  logback.xml: ""
#  login-identity-providers.xml: ""
#  nifi.properties: ""
#  state-management.xml: ""
#  zookeeper.properties: ""
#type: Opaque

# Check headless service
apiVersion: v1
kind: Service
metadata:
  name: simplenifi-headless
spec:
  clusterIP: None
  type: ClusterIP
---

# TODO How to check if the cluster is "ok" ?
# Test communication sucessfull
#---
#apiVersion: kuttl.dev/v1beta1
#kind: TestAssert
#timeout: 1
#commands:
#  - command: thiscommanddoesnotexist